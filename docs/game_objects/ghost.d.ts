import Moveable from "../abstract/moveable";
import { Cardinal } from "../enums/cardinal";
import { Color } from "../enums/color";
import { GoingToJailState } from "../enums/goingToJail";
import { ReleasingFromJailState } from "../enums/releasingFromJail";
import IGhostAgent from "../interfaces/iGhostAgent";
import MazeModel from "../models/mazeModel";
import mazeNode from "../models/mazeNode";
export default class Ghost extends Moveable {
    agent: IGhostAgent;
    facing: Cardinal;
    queuedMove: Cardinal;
    mazeNode: mazeNode;
    mazeModel: MazeModel;
    upTexture: any;
    downTexture: any;
    sideTexture: any;
    color: Color;
    jailed: boolean;
    releasingFromJailState: ReleasingFromJailState;
    eyessideTexture: any;
    eyesupTexture: any;
    eyesdownTexture: any;
    goingToJailState: GoingToJailState;
    moveFrameDelay: number;
    ghostEatenCallback: (ghost: Ghost) => void;
    constructor(x: number, y: number, mazeModel: MazeModel, color: Color);
    update(elapsedTime: number): void;
    _continueInCurrentDir(): void;
    setCorrectSpriteSheet(): void;
    _hitWall(): boolean;
    _jailedInputMove(): void;
    _releasingFromJailUpdate(): void;
    _releasingFromJailUpdateYLeveling(): void;
    _releasingFromJailUpdateXLeveling(): void;
    _releasingFromJailUpdateLeaving(): void;
    _goingToJailUpdate(): void;
    _getUpdatedMazeNode(): void;
    setDefaultTexture(): void;
    setFreightendTexture(): void;
    setBlinkFreightendTexture(): void;
}
